name: Build and Deploy Spring Boot to AWS EC2

on:
  push:
    branches: [ master ]

env:
  PROJECT_NAME: React-Springboot
  RESOURCE_PATH: ./src/main/resources/application-prod.yml
  AWS_REGION: ap-northeast-2
  AWS_S3_BUCKET: pmm-s3-1
  AWS_CODE_DEPLOY_APPLICATION: deploy-test
  AWS_CODE_DEPLOY_GROUP: deploy-test-group
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        
      - name: Setup Java JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'corretto'
          
      - name: Set yml file 
        uses: microsoft/variable-substitution@v1
        with:
          files: ${{ env.RESOURCE_PATH }}
        env:
          spring.datasource.url: ${{ secrets.DB_URL }}
          spring.datasource.username: ${{ secrets.DB_USERNAME }}
          spring.datasource.password: ${{ secrets.DB_PASSWORD }}
          spring.jpa.hibernate.ddl-auto: update
          spring.jpa.hibernate.show_sql: true
          spring.jpa.hibernate.format_sql: true
          spring.security.oauth2.client.registration.google.client-id: ${{ secrets.GOOGLE_CLIENT_ID }}
          spring.security.oauth2.client.registration.google.client-secret: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          spring.security.oauth2.client.registration.google.redirect-uri: ${{ secrets.GOOGLE_REDIRECT_URI }}
          spring.data.redis.host: ${{ secrets.REDIS_HOST }}
          spring.data.redis.password: ${{ secrets.REDIS_PASSWORD }}
          springdoc.swagger-ui.path: /api-docs.html
          jwt.accessKey: ${{ secrets.JWT_ACCESS_KEY }}
          jwt.refreshKey: ${{ secrets.JWT_REFRESH_KEY }}
          cloud.aws.credentials.access-key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          cloud.aws.credentials.secret-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  
          
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        shell: bash
      
      - name: Build with Gradle
        run: ./gradlew build
        shell: bash
        
      # - name: Make Zip File
      #   run: zip -qq -r ./$GITHUB_SHA.zip .
      #   shell: bash

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: S3에 업로드
        run: aws deploy push --application-name ${{ env.AWS_CODE_DEPLOY_APPLICATION }} --ignore-hidden-files --s3-location s3://$AWS_S3_BUCKET/cicdtest/$GITHUB_SHA.zip --source .
      - name: EC2에 배포
        run: aws deploy create-deployment --application-name ${{ env.AWS_CODE_DEPLOY_APPLICATION }} --deployment-config-name CodeDeployDefault.AllAtOnce --deployment-group-name ${{ env.AWS_CODE_DEPLOY_GROUP }} --s3-location bucket=$AWS_S3_BUCKET,key=cicdtest/$GITHUB_SHA.zip,bundleType=zip
  

        
