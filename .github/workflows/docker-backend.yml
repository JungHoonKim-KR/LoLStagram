name: Docker CI/CD Pipeline

on:
  push:
    branches:
      - master 
    paths:
      - 'backend/**'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. SSH 키 설정 (AWS EC2 접속용)
      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.AWS_EC2_HOST }} >> ~/.ssh/known_hosts

      # 3. Docker Buildx 설정
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 4. Docker 로그인 (Docker Hub 또는 Private Registry)
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 5. Docker 이미지 빌드 및 푸시
      - name: Build and Push Docker Images
        run: |
          # 현재 활성 환경 확인
          CURRENT_ENV=$(ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.AWS_EC2_USERNAME }}@${{ secrets.AWS_EC2_HOST }} "cat /home/ubuntu/active.txt")
          
          if [ "$CURRENT_ENV" == "blue" ]; then
            NEW_ENV="green"
            IMAGE_TAG="green"
          else
            NEW_ENV="blue"
            IMAGE_TAG="blue"
          fi

          echo "Deploying to $NEW_ENV environment."

          # Docker 이미지 빌드
          docker build -t ${{ secrets.DOCKER_IMAGE_NAME }}:${IMAGE_TAG} ./backend

          # Docker 이미지 푸시
          docker push ${{ secrets.DOCKER_IMAGE_NAME }}:${IMAGE_TAG}

      # 6. 배포 서버에 SSH로 접속하여 최신 Docker 이미지 배포
      - name: Deploy to Server
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /home/ubuntu

            # 현재 활성 환경 확인
            ACTIVE_ENV=$(cat /home/ubuntu/active.txt)
            if [ "$ACTIVE_ENV" == "blue" ]; then
              NEW_ENV="green"
              NEW_PORT=8081
              IMAGE_TAG="green"
            else
              NEW_ENV="blue"
              NEW_PORT=8080
              IMAGE_TAG="blue"
            fi

            echo "Deploying to $NEW_ENV environment."

            # 새로운 백엔드 컨테이너 업데이트
            docker compose pull backend_${NEW_ENV}
            docker compose up -d backend_${NEW_ENV}

            # Nginx 설정 파일 업데이트 (이전 서버에서 새로운 서버로 전환)
            sed -i "s/server backend_${ACTIVE_ENV}:808[0-1];/server backend_${NEW_ENV}:${NEW_PORT};/" nginx.conf

            # Nginx 리로드
            docker compose exec nginx nginx -s reload

            # 활성 환경 업데이트
            echo $NEW_ENV > /home/ubuntu/active.txt

            # 이전 환경 중지
            PREV_ENV=$ACTIVE_ENV
            docker compose stop backend_${PREV_ENV}
